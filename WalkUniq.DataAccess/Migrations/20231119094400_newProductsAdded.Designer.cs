// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WalkUniq.DataAccess.Data;

#nullable disable

namespace WalkUniq.DataAccess.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20231119094400_newProductsAdded")]
    partial class newProductsAdded
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.0-rc.2.23480.1");

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(21)
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUser");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("WalkUniq.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DisplayOrder = 1,
                            Name = "Man"
                        },
                        new
                        {
                            Id = 2,
                            DisplayOrder = 2,
                            Name = "Women"
                        },
                        new
                        {
                            Id = 3,
                            DisplayOrder = 3,
                            Name = "Children"
                        });
                });

            modelBuilder.Entity("WalkUniq.Models.Company", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("City")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<string>("PostalCode")
                        .HasColumnType("TEXT");

                    b.Property<string>("State")
                        .HasColumnType("TEXT");

                    b.Property<string>("StreetAddress")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Companies");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            City = "Tech City",
                            Name = "Shoes Solution",
                            PhoneNumber = "6669990000",
                            PostalCode = "12121",
                            State = "IL",
                            StreetAddress = "123 Tech St"
                        },
                        new
                        {
                            Id = 2,
                            City = "Vid City",
                            Name = "Vivid Run",
                            PhoneNumber = "7779990000",
                            PostalCode = "66666",
                            State = "IL",
                            StreetAddress = "999 Vid St"
                        },
                        new
                        {
                            Id = 3,
                            City = "Lala land",
                            Name = "Barcin Club",
                            PhoneNumber = "1113335555",
                            PostalCode = "99999",
                            State = "NY",
                            StreetAddress = "999 Main St"
                        });
                });

            modelBuilder.Entity("WalkUniq.Models.OrderDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("Count")
                        .HasColumnType("INTEGER");

                    b.Property<int>("OrderHeaderId")
                        .HasColumnType("INTEGER");

                    b.Property<double>("Price")
                        .HasColumnType("REAL");

                    b.Property<int>("ProductId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("OrderHeaderId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderDetails");
                });

            modelBuilder.Entity("WalkUniq.Models.OrderHeader", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ApplicationUserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Carrier")
                        .HasColumnType("TEXT");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("OrderStatus")
                        .HasColumnType("TEXT");

                    b.Property<double>("OrderTotal")
                        .HasColumnType("REAL");

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnType("TEXT");

                    b.Property<DateOnly>("PaymentDueDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("PaymentIntentId")
                        .HasColumnType("TEXT");

                    b.Property<string>("PaymentStatus")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("SessionId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("ShippingDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("StreetAddress")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("TrackingNumber")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.ToTable("OrderHeaders");
                });

            modelBuilder.Entity("WalkUniq.Models.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CategoryId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Company")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<double>("ListPrice")
                        .HasColumnType("REAL");

                    b.Property<double>("Price")
                        .HasColumnType("REAL");

                    b.Property<double>("Price100")
                        .HasColumnType("REAL");

                    b.Property<double>("Price50")
                        .HasColumnType("REAL");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryId = 1,
                            Company = "Converse",
                            Description = "Converse Chuck 70 Hi Unisex Siyah Sneaker",
                            ImageUrl = "",
                            ListPrice = 99.0,
                            Price = 90.0,
                            Price100 = 80.0,
                            Price50 = 85.0,
                            Title = "Converse"
                        },
                        new
                        {
                            Id = 2,
                            CategoryId = 1,
                            Company = "Converse",
                            Description = "Converse Chuck Taylor All Star Unisex Siyah Sneaker ",
                            ImageUrl = "",
                            ListPrice = 40.0,
                            Price = 30.0,
                            Price100 = 20.0,
                            Price50 = 25.0,
                            Title = "Converse"
                        },
                        new
                        {
                            Id = 3,
                            CategoryId = 1,
                            Company = "Nike",
                            Description = "Nike Waffle One Erkek Bej Spor Ayakkabı ",
                            ImageUrl = "",
                            ListPrice = 55.0,
                            Price = 50.0,
                            Price100 = 35.0,
                            Price50 = 40.0,
                            Title = "Nike"
                        },
                        new
                        {
                            Id = 4,
                            CategoryId = 1,
                            Company = "adidas",
                            Description = "adidas Ozweego Unisex Beyaz Spor Ayakkabı",
                            ImageUrl = "",
                            ListPrice = 70.0,
                            Price = 65.0,
                            Price100 = 55.0,
                            Price50 = 60.0,
                            Title = "adidas"
                        },
                        new
                        {
                            Id = 5,
                            CategoryId = 2,
                            Company = "Converse",
                            Description = "Converse Run Star Hike Platform Unisex Siyah Sneaker ",
                            ImageUrl = "",
                            ListPrice = 30.0,
                            Price = 27.0,
                            Price100 = 20.0,
                            Price50 = 25.0,
                            Title = "Converse"
                        },
                        new
                        {
                            Id = 6,
                            CategoryId = 2,
                            Company = "Vans",
                            Description = "Vans Old Skool Unisex Siyah Sneaker ",
                            ImageUrl = "",
                            ListPrice = 25.0,
                            Price = 23.0,
                            Price100 = 20.0,
                            Price50 = 22.0,
                            Title = "Vans"
                        },
                        new
                        {
                            Id = 7,
                            CategoryId = 2,
                            Company = "adidas",
                            Description = "adidas Oznova Erkek Siyah Spor Ayakkabı ",
                            ImageUrl = "\"C:\\Users\\90535\\Desktop\\images for site\\shoes image\\adidas Oznova Erkek Siyah Spor Ayakkabı.webp\"",
                            ListPrice = 66.0,
                            Price = 60.0,
                            Price100 = 54.0,
                            Price50 = 58.0,
                            Title = "Vans"
                        },
                        new
                        {
                            Id = 8,
                            CategoryId = 2,
                            Company = "adidas",
                            Description = "adidas Oznova Erkek Beyaz Spor Ayakkabı ",
                            ImageUrl = "",
                            ListPrice = 66.0,
                            Price = 60.0,
                            Price100 = 54.0,
                            Price50 = 58.0,
                            Title = "adidas"
                        },
                        new
                        {
                            Id = 9,
                            CategoryId = 2,
                            Company = "Nike",
                            Description = "Nike Blazer Mid Premium Kadın Bej Spor Ayakkabı",
                            ImageUrl = "",
                            ListPrice = 88.0,
                            Price = 85.0,
                            Price100 = 77.0,
                            Price50 = 80.0,
                            Title = "Nike"
                        },
                        new
                        {
                            Id = 10,
                            CategoryId = 2,
                            Company = "Vans",
                            Description = "Vans Sk8-HI Platform 2.0 Siyah Kadın Sneaker",
                            ImageUrl = "",
                            ListPrice = 95.0,
                            Price = 90.0,
                            Price100 = 86.0,
                            Price50 = 88.0,
                            Title = "Vans"
                        },
                        new
                        {
                            Id = 11,
                            CategoryId = 2,
                            Company = "adidas",
                            Description = "adidas Falcon Kadın Siyah Spor Ayakkabı",
                            ImageUrl = "",
                            ListPrice = 95.0,
                            Price = 90.0,
                            Price100 = 86.0,
                            Price50 = 88.0,
                            Title = "adidas"
                        },
                        new
                        {
                            Id = 12,
                            CategoryId = 2,
                            Company = "Puma",
                            Description = "Puma Mayze Kadın Siyah Spor Ayakkabı",
                            ImageUrl = "",
                            ListPrice = 110.0,
                            Price = 108.0,
                            Price100 = 100.0,
                            Price50 = 105.0,
                            Title = "Puma"
                        },
                        new
                        {
                            Id = 13,
                            CategoryId = 2,
                            Company = "Puma",
                            Description = "Puma Mayze Kadın Platform Bej Spor Ayakkabı",
                            ImageUrl = "",
                            ListPrice = 110.0,
                            Price = 108.0,
                            Price100 = 100.0,
                            Price50 = 105.0,
                            Title = "Puma"
                        },
                        new
                        {
                            Id = 14,
                            CategoryId = 2,
                            Company = "Tommy Jeans",
                            Description = "Tommy Jeans Retro Basket Kadın Beyaz Sneaker",
                            ImageUrl = "",
                            ListPrice = 150.0,
                            Price = 140.0,
                            Price100 = 130.0,
                            Price50 = 138.0,
                            Title = "Tommy Jeans"
                        },
                        new
                        {
                            Id = 15,
                            CategoryId = 2,
                            Company = "Puma",
                            Description = "Puma Mayze Kadın Beyaz Spor Ayakkabı",
                            ImageUrl = "",
                            ListPrice = 100.0,
                            Price = 98.0,
                            Price100 = 95.0,
                            Price50 = 96.0,
                            Title = "Puma"
                        },
                        new
                        {
                            Id = 16,
                            CategoryId = 2,
                            Company = "Puma",
                            Description = "Puma RS-X Reinvention Kadın Krem Spor Ayakkabı",
                            ImageUrl = "",
                            ListPrice = 110.0,
                            Price = 94.0,
                            Price100 = 85.0,
                            Price50 = 91.0,
                            Title = "Puma"
                        },
                        new
                        {
                            Id = 17,
                            CategoryId = 2,
                            Company = "adidas",
                            Description = "adidas Forum Bold Kadın Beyaz Spor Ayakkabı",
                            ImageUrl = "",
                            ListPrice = 170.0,
                            Price = 114.0,
                            Price100 = 95.0,
                            Price50 = 111.0,
                            Title = "adidas"
                        },
                        new
                        {
                            Id = 18,
                            CategoryId = 2,
                            Company = "Puma",
                            Description = "Puma Mayze Kadın Mor Spor Ayakkabı",
                            ImageUrl = "",
                            ListPrice = 100.0,
                            Price = 96.0,
                            Price100 = 85.0,
                            Price50 = 90.0,
                            Title = "Puma"
                        },
                        new
                        {
                            Id = 19,
                            CategoryId = 1,
                            Company = "adidas",
                            Description = "adidas Response Cl Kahverengi Spor Ayakkabı",
                            ImageUrl = "",
                            ListPrice = 100.0,
                            Price = 96.0,
                            Price100 = 85.0,
                            Price50 = 90.0,
                            Title = "adidas"
                        },
                        new
                        {
                            Id = 20,
                            CategoryId = 1,
                            Company = "Nike",
                            Description = "Nike Air Vapormax 2023 Flyknit Erkek Mavi Spor Ayakkabı",
                            ImageUrl = "",
                            ListPrice = 220.0,
                            Price = 200.0,
                            Price100 = 170.0,
                            Price50 = 180.0,
                            Title = "Nike"
                        },
                        new
                        {
                            Id = 21,
                            CategoryId = 1,
                            Company = "Nike",
                            Description = "Nike Air Max 97 Erkek Gri Spor Ayakkabı",
                            ImageUrl = "",
                            ListPrice = 218.0,
                            Price = 200.0,
                            Price100 = 170.0,
                            Price50 = 180.0,
                            Title = "Nike"
                        },
                        new
                        {
                            Id = 22,
                            CategoryId = 1,
                            Company = "adidas",
                            Description = "adidas Superstar Erkek Beyaz Spor Ayakkabı",
                            ImageUrl = "",
                            ListPrice = 170.0,
                            Price = 165.0,
                            Price100 = 150.0,
                            Price50 = 160.0,
                            Title = "adidas"
                        },
                        new
                        {
                            Id = 23,
                            CategoryId = 1,
                            Company = "adidas",
                            Description = "adidas Adifom Superstar Erkek Haki Spor Ayakkabı",
                            ImageUrl = "",
                            ListPrice = 150.0,
                            Price = 140.0,
                            Price100 = 120.0,
                            Price50 = 130.0,
                            Title = "adidas"
                        },
                        new
                        {
                            Id = 24,
                            CategoryId = 1,
                            Company = "Puma",
                            Description = "Puma BMW MMS Maco Erkek Beyaz Spor Ayakkabı",
                            ImageUrl = "",
                            ListPrice = 260.0,
                            Price = 250.0,
                            Price100 = 180.0,
                            Price50 = 200.0,
                            Title = "Puma"
                        });
                });

            modelBuilder.Entity("WalkUniq.Models.ShoppingCart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ApplicationUserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Count")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ProductId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("ProductId");

                    b.ToTable("ShoppingCarts");
                });

            modelBuilder.Entity("WalkUniq.Models.ApplicationUser", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.Property<string>("City")
                        .HasColumnType("TEXT");

                    b.Property<int?>("CompanyId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("PostalCode")
                        .HasColumnType("TEXT");

                    b.Property<string>("State")
                        .HasColumnType("TEXT");

                    b.Property<string>("StreetAddress")
                        .HasColumnType("TEXT");

                    b.HasIndex("CompanyId");

                    b.HasDiscriminator().HasValue("ApplicationUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WalkUniq.Models.OrderDetail", b =>
                {
                    b.HasOne("WalkUniq.Models.OrderHeader", "OrderHeader")
                        .WithMany()
                        .HasForeignKey("OrderHeaderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WalkUniq.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OrderHeader");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("WalkUniq.Models.OrderHeader", b =>
                {
                    b.HasOne("WalkUniq.Models.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUser");
                });

            modelBuilder.Entity("WalkUniq.Models.Product", b =>
                {
                    b.HasOne("WalkUniq.Models.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("WalkUniq.Models.ShoppingCart", b =>
                {
                    b.HasOne("WalkUniq.Models.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WalkUniq.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUser");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("WalkUniq.Models.ApplicationUser", b =>
                {
                    b.HasOne("WalkUniq.Models.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId");

                    b.Navigation("Company");
                });
#pragma warning restore 612, 618
        }
    }
}
